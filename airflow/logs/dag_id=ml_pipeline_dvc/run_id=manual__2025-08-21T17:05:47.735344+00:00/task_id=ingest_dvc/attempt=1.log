{"timestamp":"2025-08-21T17:06:02.705832","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-21T17:06:02.742819","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/ml_pipeline_dvc_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-21T17:06:03.712676","level":"info","event":"Tmp dir root location: /tmp","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:03.730271","level":"info","event":"Running command: ['/usr/bin/bash', '-c', '\\n            cd /opt/airflow/ml_pipeline \\n            dvc repro ingest --force    \\n            dvc push\\n        ']","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:03.771046","level":"info","event":"Output:","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:17.051988","level":"info","event":"Running stage 'ingest':","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:17.052318","level":"info","event":"> python data/ingest/etl_task.py && python data/ingest/download_data.py","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:31.045564","level":"info","event":"{\"asctime\": \"2025-08-21 17:06:31,041\", \"levelname\": \"INFO\", \"name\": \"model_training\", \"trace_id\": null, \"span_id\": null, \"message\": \"AWS ENDPOINT is: http://minio:9000\"}","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:31.085563","level":"info","event":"{\"asctime\": \"2025-08-21 17:06:31,084\", \"levelname\": \"INFO\", \"name\": \"model_training\", \"trace_id\": null, \"span_id\": null, \"message\": \"Simulated data generated.\"}","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:31.424797","level":"info","event":"{\"asctime\": \"2025-08-21 17:06:31,423\", \"levelname\": \"INFO\", \"name\": \"model_training\", \"trace_id\": null, \"span_id\": null, \"message\": \"Simulated data saved at s3://mlflow-artifacts/data/raw/fraud_data_v20250821_170631.csv.\"}","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:31.440559","level":"info","event":"{\"asctime\": \"2025-08-21 17:06:31,438\", \"levelname\": \"INFO\", \"name\": \"model_training\", \"trace_id\": null, \"span_id\": null, \"message\": \"\\u2705 Saved version_meta.json locally.\"}","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:31.536182","level":"info","event":"{\"asctime\": \"2025-08-21 17:06:31,529\", \"levelname\": \"INFO\", \"name\": \"model_training\", \"trace_id\": null, \"span_id\": null, \"message\": \"Meta Version saved to: s3://mlflow-artifacts/data/raw/metadata_v20250821_170631.json\"}","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:36.847478","level":"info","event":"{\"asctime\": \"2025-08-21 17:06:36,845\", \"levelname\": \"INFO\", \"name\": \"model_training\", \"trace_id\": null, \"span_id\": null, \"message\": \"\\u2705 Data saved locally in data/raw\"}","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:37.963023","level":"info","event":"Updating lock file 'dvc.lock'","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.012156","level":"info","event":"","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.012790","level":"info","event":"To track the changes with git, run:","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.013824","level":"info","event":"","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.014687","level":"info","event":"\tgit add dvc.lock","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.015050","level":"info","event":"","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.015390","level":"info","event":"To enable auto staging, run:","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.015723","level":"info","event":"","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.016239","level":"info","event":"\tdvc config core.autostage true","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:38.033395","level":"info","event":"Use `dvc push` to send your updates to remote storage.","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:55.159134","level":"info","event":"12 files pushed","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:57.403450","level":"info","event":"Command exited with return code 0","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-21T17:06:57.448673","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0198cd98-0181-715f-91c6-ca5f96669cad'), task_id='ingest_dvc', dag_id='ml_pipeline_dvc', run_id='manual__2025-08-21T17:05:47.735344+00:00', try_number=1, map_index=-1, hostname='c64456fb60b5', context_carrier={}, task=<Task(BashOperator): ingest_dvc>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 8, 21, 17, 5, 55, 307684, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/ml_pipeline_dvc/runs/manual__2025-08-21T17%3A05%3A47.735344%2B00%3A00/tasks/ingest_dvc?try_number=1')","logger":"task"}
